! Configuration File for keepalived

# vi /etc/keepalived/keepalived.conf

# 全局配置主要配置故障发生时的通知对象和机器ID。
global_defs {
    router_id LVS_DEVEL_1               # 路由ID，标识该节点的字符串，用于发送电子邮件通知
}

# 自定义VRRP实例健康检查脚本keepalive只能监控自身问题和网络故障。脚本可以添加其他监控来决定是否在主备之间切换。

# VRRP实例定义对外提供服务的VIP区域和相关属性
vrrp_instance VI_1 {

    state BACKUP                        # “状态”只有“MASTER”和“BACKUP”，且必须为大写，“MASTER”为“working”，“BACKUP”为“standby”。
    interface enp0s2                      # 节点固有IP (非vip) 网卡，用于发送 VRRP 报文
    virtual_router_id 51                # 虚拟路由ID、相同vrrp_instance MASTER和BACKUP的vitrual_router_id需要保持一致
    priority 200                        # priority，同一vrrp_instance的MASTER优先级必须高于BACKUP
    advert_int 1                        # MASTER 和 BACKUP 负载均衡器同步检查间隔 (秒)
    garp_master_delay 5                 # 当切为 MASTER 状态后多久更新 ARP 缓存，默认5秒
    nopreempt                           # 非抢占模式
    authentication {                    #
        auth_type PASS                  # 鉴权方式，支持 PASS 和 HA
        auth_pass Rancher@123456        # MASTER 和 BACKUP 使用相同的密码进行通信
    }

    virtual_ipaddress {                 # 虚拟IP地址(VIP)，可以有多个地址，每行一个
        172.16.131.100
    }
}

# 设置虚拟服务器
virtual_server 172.16.131.100 9443 {    # 指定虚拟IP地址和业务端口

    delay_loop 6                        # 检查周期，6 秒
    lb_algo rr                          # 负载均衡调度算法，一般采用 wrr、rr、WLC
    lb_kind NAT                          # lb_kind LVS 调度类型 NAT/DR/TUN
    persistence_timeout 30              # 会话保持时间。在不超过保持时间的情况下，将用户请求间隔分配到业务节点
#    persistence_granularity             # lvs 会话保持粒度
    virtualhost                         # 用来给 HTTP_GET 和SSL_GET配置请求header的。
    protocol TCP                        # 转发协议有TCP和UDP两种。

    # 配置实服务器
    real_server 172.16.131.3 6443
    {    # 指定后端真实服务器 IP和端口

        weight 1                        # 权重，值越大，权重越高
        inhibit_on_failure              # 在服务器健康检查失效时，将其设为 0，而不是直接从 ipvs 中删除

        # 常用的 TCP_CHECK, HTTP_GET, SSL_GET, MISC_CHECK(自定义脚本)
        SSL_GET
        {
            http_protocol 1.0
            url {                       # 检查url，可以指定多个
                path /healthz           # path 请求real serserver上的路径
                status_code             # 检查的http状态码
                regex ok
                }
            connect_timeout 3           # 超时时长
            retry 3              # 重试次数
            delay_before_retry 2        # 重连间隔
         }
    }
    real_server 172.16.131.4 6443
    {    # 指定后端真实服务器 IP和端口

        weight 1                        # 权重，值越大，权重越高
        inhibit_on_failure              # 在服务器健康检查失效时，将其设为 0，而不是直接从 ipvs 中删除

        # 常用的 TCP_CHECK, HTTP_GET, SSL_GET, MISC_CHECK(自定义脚本)
        SSL_GET {
            http_protocol 1.0
            url {                       # 检查url，可以指定多个
                path /healthz           # path 请求real serserver上的路径
                status_code             # 检查的http状态码
                regex ok
                }
            connect_timeout 3           # 超时时长
            retry 3              # 重试次数
            delay_before_retry 2        # 重连间隔
         }
    }
        real_server 172.16.131.5 6443
    {    # 指定后端真实服务器 IP和端口

        weight 1                        # 权重，值越大，权重越高
        inhibit_on_failure              # 在服务器健康检查失效时，将其设为 0，而不是直接从 ipvs 中删除

        # 常用的 TCP_CHECK, HTTP_GET, SSL_GET, MISC_CHECK(自定义脚本)
        SSL_GET {
            http_protocol 1.0
            url {                       # 检查url，可以指定多个
                path /healthz           # path 请求real serserver上的路径
                status_code             # 检查的http状态码
                regex ok
                }
            connect_timeout 3           # 超时时长
            retry 3              # 重试次数
            delay_before_retry 2        # 重连间隔
         }
    }
}

# 用于SSL_GET检查的参数。
# 如果未指定任何参数，则将自动生成SSL上下文。
SSL {
   #password <STRING>                               # 密码
   ca /etc/kubernetes/ssl/kube-ca.pem               # ca文件
   certificate /etc/kubernetes/ssl/kube-node.pem    # 证书文件
   key /etc/kubernetes/ssl/kube-node-key.pem        # 密钥文件
}